"use strict";(self.webpackChunkroblox_ts_com=self.webpackChunkroblox_ts_com||[]).push([[383],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,k=m["".concat(o,".").concat(d)]||m[d]||u[d]||l;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3212:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],s={title:"Roblox API"},o=void 0,c={unversionedId:"api/roblox-api",id:"api/roblox-api",title:"Roblox API",description:"roblox-ts provides typings for the Roblox API which are partially handwritten and partially automatically generated.",source:"@site/docs/api/roblox-api.mdx",sourceDirName:"api",slug:"/api/roblox-api",permalink:"/roblox-ts.com/docs/api/roblox-api",draft:!1,editUrl:"https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/roblox-api.mdx",tags:[],version:"current",frontMatter:{title:"Roblox API"},sidebar:"docs",previous:{title:"FAQ",permalink:"/roblox-ts.com/docs/faq"},next:{title:"Identifiers",permalink:"/roblox-ts.com/docs/api/identifiers"}},p={},u=[{value:"Values",id:"values",level:2},{value:"Globals",id:"globals",level:3},{value:"Constructors",id:"constructors",level:3},{value:"nil",id:"nil",level:3},{value:"Types",id:"types",level:2},{value:"Provided Types",id:"provided-types",level:3},{value:"RemoteEvent Types",id:"remoteevent-types",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Utility Interfaces",id:"utility-interfaces",level:2},{value:"Services",id:"services",level:3},{value:"CreatableInstances",id:"creatableinstances",level:3},{value:"AbstractInstances",id:"abstractinstances",level:3},{value:"Instances",id:"instances",level:3},{value:"Usage with Generics",id:"usage-with-generics",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"roblox-ts provides typings for the Roblox API which are partially handwritten and partially automatically generated."),(0,l.kt)("p",null,"In general, everything from the Roblox API is available for use, unless it is deprecated or conflicts with TypeScript."),(0,l.kt)("h2",{id:"values"},"Values"),(0,l.kt)("h3",{id:"globals"},"Globals"),(0,l.kt)("p",null,"All global values from the Roblox API are present in roblox-ts typings."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'print("Hello World!");\n')),(0,l.kt)("br",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const zero = math.sin(math.pi);\n")),(0,l.kt)("br",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'coroutine.wrap(() => {\n    print("A");\n    wait(1);\n    print("B");\n})();\n')),(0,l.kt)("br",null),(0,l.kt)("p",null,"You can find a list of available globals on the Roblox Developer Hub:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/Lua-Globals"},"Lua Globals")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/Roblox-Globals"},"Roblox Globals")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/bit32"},"bit32")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/coroutine"},"coroutine")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/debug"},"debug")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/math"},"math")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/os"},"os")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/string"},"string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/table"},"table")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/task"},"task")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.roblox.com/api-reference/lua-docs/utf8"},"utf8"))),(0,l.kt)("p",null,"Parts of ",(0,l.kt)("inlineCode",{parentName:"p"},"table")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," have been intentionally omitted."),(0,l.kt)("h3",{id:"constructors"},"Constructors"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".new()")," functions (like ",(0,l.kt)("inlineCode",{parentName:"p"},"Vector3.new()")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"CFrame.new()"),") should instead be called with the ",(0,l.kt)("inlineCode",{parentName:"p"},"new")," operator."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"new T(...)")," will always compile to ",(0,l.kt)("inlineCode",{parentName:"p"},"T.new(...)"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const v3 = new Vector3(1, 2, 3); // compiles to Vector3.new(1, 2, 3)\nprint(v3.X, v3.Y, v3.Z); // 1 2 3\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const part = new Instance("Part");\nprint(part.Color);\n')),(0,l.kt)("h3",{id:"nil"},"nil"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," is a direct replacement for ",(0,l.kt)("inlineCode",{parentName:"p"},"nil"),". It can be used both as a type and a value."),(0,l.kt)("h2",{id:"types"},"Types"),(0,l.kt)("h3",{id:"provided-types"},"Provided Types"),(0,l.kt)("p",null,"Every Roblox class (",(0,l.kt)("inlineCode",{parentName:"p"},"Instance"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Part"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Humanoid"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Workspace"),", etc.) is provided as a global/ambient type. You can use these types to describe variables, function parameters, function return types, and just about anything else in your code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'// note: The type Part could be inferred here if not provided\nconst part: Part = new Instance("Part");\nprint(part.Size);\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'function takesBasePart(basePart: BasePart) {\n    return basePart.Size.X + basePart.Size.Y + basePart.Size.Z;\n}\n\n// we can use any type which inherits from BasePart!\ntakesBasePart(new Instance("Seat"));\ntakesBasePart(new Instance("Part"));\ntakesBasePart(new Instance("WedgePart"));\n\n// Humanoid does not inherit from BasePart, so this will error!\n// takesBasePart(new Instance("Humanoid"));\n')),(0,l.kt)("h3",{id:"remoteevent-types"},"RemoteEvent Types"),(0,l.kt)("p",null,"New roblox-ts users are usually confused why ",(0,l.kt)("inlineCode",{parentName:"p"},"RemoteEvent.OnServerEvent")," only allows ",(0,l.kt)("inlineCode",{parentName:"p"},"unknown")," arguments."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const remoteEvent = new Instance("RemoteEvent");\n\n// this works fine\nremoteEvent.OnClientEvent.Connect((points: number) => {});\n\n// changing unknown to number causes an error!\nremoteEvent.OnServerEvent.Connect((player: Player, points: unknown) => {});\n')),(0,l.kt)("p",null,"The reason for this is because client-to-server networking ",(0,l.kt)("em",{parentName:"p"},"cannot")," be trusted. Exploiters or cheaters in your game can fire your RemoteEvent functions with whatever data they want."),(0,l.kt)("p",null,"If your code is expecting ",(0,l.kt)("inlineCode",{parentName:"p"},"points")," to be a ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),", but the client sends a ",(0,l.kt)("inlineCode",{parentName:"p"},"nil")," value, the server will error. By sending a large number of requests very quickly which result in errors, an exploiter could crash your game server and disconnect all of your players."),(0,l.kt)("p",null,"Instead, you should assume your inputs can be any possible value. You can verify the arguments with a type validation package like ",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@rbxts/t"},(0,l.kt)("inlineCode",{parentName:"a"},"@rbxts/t")),"."),(0,l.kt)("p",null,"Alternatively, the community has created a few networking libraries which make the experience much nicer!"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@rbxts/net"},"@rbxts/net")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@rbxts/networked-signals"},"@rbxts/networked-signals")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@rbxts/simplesignals"},"@rbxts/simplesignals"))),(0,l.kt)("h3",{id:"exceptions"},"Exceptions"),(0,l.kt)("p",null,"Deprecated types are usually not provided. Exceptions to this rule are made for API members which do not have a non-deprecated functional equivalent."),(0,l.kt)("p",null,"One notable exception: ",(0,l.kt)("inlineCode",{parentName:"p"},"Instance.Changed")," is not provided as it conflicts with inheritance. Usually, you want to use ",(0,l.kt)("inlineCode",{parentName:"p"},"Instance.GetPropertyChangedSignal()")," instead."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Workspace } from "@rbxts/services";\nWorkspace.GetPropertyChangedSignal("DistributedGameTime").Connect(() => {\n    print(Workspace.DistributedGameTime);\n});\n')),(0,l.kt)("p",null,"If you ",(0,l.kt)("em",{parentName:"p"},"must")," use ",(0,l.kt)("inlineCode",{parentName:"p"},"Instance.Changed"),", you can workaround this by asserting an intersection type with ",(0,l.kt)("inlineCode",{parentName:"p"},"ChangedSignal"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"function foo(part: Part) {\n    (part as Part & ChangedSignal).Changed.Connect(name => {})\n}\n")),(0,l.kt)("h2",{id:"utility-interfaces"},"Utility Interfaces"),(0,l.kt)("p",null,"There are a few key global interfaces which make manipulating types easier:"),(0,l.kt)("h3",{id:"services"},"Services"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Services")," is an interface consisting of a mapping of string name to type for every Roblox service which you can fetch with ",(0,l.kt)("inlineCode",{parentName:"p"},'game:GetService("ServiceName")'),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface Services {\n    AnalyticsService: AnalyticsService;\n    AppUpdateService: AppUpdateService;\n    AssetCounterService: AssetCounterService;\n    AssetDeliveryProxy: AssetDeliveryProxy;\n    // ... many more services!\n}\n")),(0,l.kt)("p",null,"You can get a union of all service names with ",(0,l.kt)("inlineCode",{parentName:"p"},"keyof Services"),".\nAnd you can get a union of all service types with ",(0,l.kt)("inlineCode",{parentName:"p"},"Services[keyof Services]"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type AllServiceNames = keyof Services;\ntype AllServices = Services[keyof Services];\n")),(0,l.kt)("h3",{id:"creatableinstances"},"CreatableInstances"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"CreatableInstances")," is an interface consisting of a mapping of string name to type for every Roblox instance which can be created with ",(0,l.kt)("inlineCode",{parentName:"p"},'Instance.new("ClassName")'),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface CreatableInstances {\n    Accessory: Accessory;\n    Accoutrement: Accoutrement;\n    Actor: Actor;\n    AlignOrientation: AlignOrientation;\n    // ... many more instances!\n}\n")),(0,l.kt)("p",null,"You can get a union of all creatable instance names with ",(0,l.kt)("inlineCode",{parentName:"p"},"keyof CreatableInstances"),".\nAnd you can get a union of all creatable instance types with ",(0,l.kt)("inlineCode",{parentName:"p"},"CreatableInstances[keyof CreatableInstances]"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type AllCreatableInstanceNames = keyof CreatableInstances;\ntype AllCreatableInstances = CreatableInstances[keyof CreatableInstances];\n")),(0,l.kt)("h3",{id:"abstractinstances"},"AbstractInstances"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"AbstractInstances")," is an interface consisting of a mapping of string name to type for every Roblox instance which will ",(0,l.kt)("em",{parentName:"p"},"never")," be created. Generally, these are useful for functions that check inheritance like ",(0,l.kt)("inlineCode",{parentName:"p"},'Instance:IsA("ClassName")'),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface AbstractInstances {\n    BackpackItem: BackpackItem;\n    BasePart: BasePart;\n    BasePlayerGui: BasePlayerGui;\n    BaseScript: BaseScript;\n    // ... many more instances!\n}\n")),(0,l.kt)("p",null,"You can get a union of all abstract instance names with ",(0,l.kt)("inlineCode",{parentName:"p"},"keyof AbstractInstances"),".\nAnd you can get a union of all abstract instance types with ",(0,l.kt)("inlineCode",{parentName:"p"},"AbstractInstances[keyof AbstractInstances]"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type AllAbstractInstanceNames = keyof AbstractInstances;\ntype AllAbstractInstances = AbstractInstances[keyof AbstractInstances];\n")),(0,l.kt)("h3",{id:"instances"},"Instances"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Instances")," is an interface consisting of a mapping of string name to type for every Roblox instance. It inherits from ",(0,l.kt)("inlineCode",{parentName:"p"},"Services"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"CreatableInstances"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"AbstractInstances"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"Instances")," and also includes any type of Instance which:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"cannot be created with ",(0,l.kt)("inlineCode",{parentName:"li"},'Instance.new("ClassName")')),(0,l.kt)("li",{parentName:"ul"},"cannot be fetched with ",(0,l.kt)("inlineCode",{parentName:"li"},'game:GetService("ServiceName")')),(0,l.kt)("li",{parentName:"ul"},"but ",(0,l.kt)("em",{parentName:"li"},"can")," be given a reference to")),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DataModel")," is a class that cannot be created or fetched with GetService, but is given by the ",(0,l.kt)("inlineCode",{parentName:"li"},"game")," global value"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AnimationTrack")," can only be given a reference to via ",(0,l.kt)("inlineCode",{parentName:"li"},":LoadAnimation()")," from ",(0,l.kt)("inlineCode",{parentName:"li"},"Humanoid")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"AnimationTrack"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface Instances extends Services, CreatableInstances, AbstractInstances {\n    AnimationTrack: AnimationTrack;\n    BaseWrap: BaseWrap;\n    CatalogPages: CatalogPages;\n    DataModel: DataModel;\n    // ... many more instances!\n}\n")),(0,l.kt)("p",null,"You can get a union of all instance names with ",(0,l.kt)("inlineCode",{parentName:"p"},"keyof Instances"),".\nAnd you can get a union of all instance types with ",(0,l.kt)("inlineCode",{parentName:"p"},"Instances[keyof Instances]"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type AllInstanceNames = keyof Instances;\ntype AllInstances = Instances[keyof Instances];\n")),(0,l.kt)("h3",{id:"usage-with-generics"},"Usage with Generics"),(0,l.kt)("p",null,"You can use any of these utility interfaces with generic functions. This is useful for taking an argument string and returning a matching instance type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Workspace } from "@rbxts/services";\n\nfunction getDescendantsWhichIsA<T extends keyof Instances>(parent: Instance, className: T): Instances[T][] {\n    return parent.GetDescendants().filter((descendant): descendant is Instances[T] => descendant.IsA(className));\n}\n\nconst humanoidsInWorkspace: Array<Humanoid> = getDescendantsWhichIsA(Workspace, "Humanoid");\n')))}d.isMDXComponent=!0}}]);