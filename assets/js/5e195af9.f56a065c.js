"use strict";(self.webpackChunkroblox_ts_com=self.webpackChunkroblox_ts_com||[]).push([[241],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(i,".").concat(m)]||d[m]||c[m]||l;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6223:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return c}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],u={title:"LuaTuple<T>"},i=void 0,s={unversionedId:"guides/lua-tuple",id:"guides/lua-tuple",title:"LuaTuple<T>",description:"The Problem",source:"@site/docs/guides/lua-tuple.mdx",sourceDirName:"guides",slug:"/guides/lua-tuple",permalink:"/roblox-ts.com/docs/guides/lua-tuple",draft:!1,editUrl:"https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/lua-tuple.mdx",tags:[],version:"current",frontMatter:{title:"LuaTuple<T>"},sidebar:"docs",previous:{title:"Indexing Children",permalink:"/roblox-ts.com/docs/guides/indexing-children"},next:{title:"Roact JSX",permalink:"/roblox-ts.com/docs/guides/roact-jsx"}},p={},c=[{value:"The Problem",id:"the-problem",level:2},{value:"The Solution",id:"the-solution",level:2},{value:"Examples",id:"examples",level:2},{value:"Using <code>LuaTuple&lt;T&gt;</code> in Your Own Code",id:"using-luatuplet-in-your-own-code",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"the-problem"},"The Problem"),(0,l.kt)("p",null,"Given the following Luau code, how do we type it?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local function foo()\n    return "abc", 123\nend\n')),(0,l.kt)("p",null,"Multiple returns are a common occurrence in Luau, but not really a concept in TypeScript. ",(0,l.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/basic-types.html#tuple"},'TypeScript does have a feature called "tuples"')," which allow for fixed length array types with an individual type for each index."),(0,l.kt)("p",null,"So we might type this as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"declare function foo(): [string, number];\n")),(0,l.kt)("p",null,"However, this is not correct! TypeScript tuples are arrays, not multiple returns. It would expect the Luau to be ",(0,l.kt)("inlineCode",{parentName:"p"},'return { "abc", 123 }'),"."),(0,l.kt)("h2",{id:"the-solution"},"The Solution"),(0,l.kt)("p",null,"To solve this problem, roblox-ts introduces a special type called ",(0,l.kt)("inlineCode",{parentName:"p"},"LuaTuple<T>"),". This is typed as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type LuaTuple<T extends Array<any>> = T & { readonly LUA_TUPLE: never };\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"LUA_TUPLE")," is used to ensure the type name is not lost or cast into an ",(0,l.kt)("inlineCode",{parentName:"p"},"Array<T>")," accidentally."),(0,l.kt)("p",null,"When the compiler sees this type as a function return type, it can infer that it's meant to be a multiple return."),(0,l.kt)("p",null,"In general, this type is used for typing existing Luau modules or the Roblox API."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("p",null,"If you immediately destructure the result, it will be compiled into a simple variable declaration from a multiple return."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const [actualTimeYielded, totalTime] = wait(1);\n")),(0,l.kt)("p",null,"If you do ",(0,l.kt)("em",{parentName:"p"},"not")," destructure the result, the compiler will wrap the return in ",(0,l.kt)("inlineCode",{parentName:"p"},"{ }")," and turn the result into an array object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const result = wait(1);\nconst actualTimeYielded = result[0];\nconst totalTime = result[1];\n")),(0,l.kt)("p",null,"You can also index the result immediately after the function call and receive an optimized emit:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Players } from "@rbxts/services";\n\n// .Wait() here returns LuaTuple<[character: Model]>,\n// so we need to use `[0]` to grab the first (and only) element.\nconst character = Players.LocalPlayer.Character || Players.LocalPlayer.CharacterAdded.Wait()[0];\n')),(0,l.kt)("h2",{id:"using-luatuplet-in-your-own-code"},"Using ",(0,l.kt)("inlineCode",{parentName:"h2"},"LuaTuple<T>")," in Your Own Code"),(0,l.kt)("p",null,"The compiler supports using ",(0,l.kt)("inlineCode",{parentName:"p"},"LuaTuple<T>")," in outside of type definitions, but it's generally not recommended. However, if you're writing code that is consumed by an existing Luau module this can be useful!"),(0,l.kt)("p",null,"Unfortunately, you have to assert the type of your return because of the ",(0,l.kt)("inlineCode",{parentName:"p"},"LUA_TUPLE")," tag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'function hasMultipleReturns(): LuaTuple<[string, number]> {\n    // this will compile into `return "abc", 123`\n    return ["abc", 123] as LuaTuple<[string, number]>\n}\n')))}m.isMDXComponent=!0}}]);