"use strict";(self.webpackChunkroblox_ts=self.webpackChunkroblox_ts||[]).push([[652],{5280:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>E,contentTitle:()=>I,default:()=>M,frontMatter:()=>T,metadata:()=>N,toc:()=>k});var r=t(7624),a=t(2172),s=t(1504),o=t(5456),l=t(3943),i=t(5592),c=t(5288),d=t(632),u=t(7128),h=t(1148);function m(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,u.w)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.Uz)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,d._M)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=x(e),[o,l]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[i,d]=f({queryString:t,groupId:r}),[u,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,h.IN)(t);return[r,(0,s.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),b=(()=>{const e=i??u;return p({value:e,tabValues:a})?e:null})();(0,c.c)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),m(e)}),[d,m,a]),tabValues:a}}var j=t(3664);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.MV)(),u=e=>{const n=e.currentTarget,t=c.indexOf(n),r=i[t].value;r!==a&&(d(n),s(r))},h=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.c)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>c.push(e),onKeyDown:h,onClick:u,...s,className:(0,o.c)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function w(e){const n=b(e);return(0,r.jsxs)("div",{className:(0,o.c)("tabs-container",g.tabList),children:[(0,r.jsx)(v,{...e,...n}),(0,r.jsx)(y,{...e,...n})]})}function R(e){const n=(0,j.c)();return(0,r.jsx)(w,{...e,children:m(e.children)},String(n))}const C={tabItem:"tabItem_Ymn6"};function S(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.c)(C.tabItem,a),hidden:t,children:n})}const T={title:"Roact JSX"},I=void 0,N={id:"guides/roact-jsx",title:"Roact JSX",description:"The following guide assumes that you are already familiar with Roact.",source:"@site/docs/guides/roact-jsx.mdx",sourceDirName:"guides",slug:"/guides/roact-jsx",permalink:"/roblox-ts.com/docs/guides/roact-jsx",draft:!1,unlisted:!1,editUrl:"https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/guides/roact-jsx.mdx",tags:[],version:"current",frontMatter:{title:"Roact JSX"},sidebar:"docs",previous:{title:"LuaTuple<T>",permalink:"/roblox-ts.com/docs/guides/lua-tuple"},next:{title:"Using Existing Luau",permalink:"/roblox-ts.com/docs/guides/using-existing-luau"}},E={},k=[{value:"Introduction",id:"introduction",level:2},{value:"Tag Names",id:"tag-names",level:2},{value:"Special Attributes",id:"special-attributes",level:2},{value:"<code>Key</code> Attribute",id:"key-attribute",level:3},{value:"<code>Ref</code> Attribute",id:"ref-attribute",level:3},{value:"<code>Change</code> Attribute",id:"change-attribute",level:3},{value:"<code>Event</code> Attribute",id:"event-attribute",level:3},{value:"Spreading into Attributes",id:"spreading-into-attributes",level:2},{value:"Spreading into Children",id:"spreading-into-children",level:2},{value:"Using Values as Children",id:"using-values-as-children",level:2},{value:"Fragments",id:"fragments",level:2},{value:"Extending the default JSX elements",id:"extending-the-default-jsx-elements",level:2}];function V(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The following guide assumes that you are already familiar with Roact. ",(0,r.jsx)("br",{}),"\nPlease refer to the ",(0,r.jsx)(n.a,{href:"https://roblox.github.io/roact/",children:"Roact documentation"})," for more information."]})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:'While roblox-ts allows you to use Roact just like you would in Luau, it also supports a "JSX" shorthand form.'}),"\n","\n","\n",(0,r.jsxs)(R,{defaultValue:"tsx",values:[{label:"JSX",value:"tsx"},{label:"Normal",value:"ts"}],children:[(0,r.jsx)(S,{value:"tsx",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst element = (\n\t<frame Size={new UDim2(1, 0, 1, 0)}>\n\t\t<frame Key="Child" Size={new UDim2(1, 0, 1, 0)} />\n\t</frame>\n);\n'})})}),(0,r.jsx)(S,{value:"ts",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import Roact from "@rbxts/roact";\n\nconst element = Roact.createElement(\n\t"Frame",\n\t{\n\t\tSize: new UDim2(1, 0, 1, 0),\n\t},\n\t{\n\t\tChild: Roact.createElement("Frame", {\n\t\t\tSize: new UDim2(1, 0, 1, 0),\n\t\t}),\n\t}\n);\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://reactjs.org/docs/introducing-jsx.html",children:"You can learn more about JSX here."})}),"\n",(0,r.jsx)(n.h2,{id:"tag-names",children:"Tag Names"}),"\n",(0,r.jsxs)(n.p,{children:['The "tag name" in JSX is the expression after the initial ',(0,r.jsx)(n.code,{children:"<"})," character. ",(0,r.jsx)("br",{}),"\nFor example, ",(0,r.jsx)(n.code,{children:"frame"})," is the tag name of ",(0,r.jsx)(n.code,{children:"<frame />"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"You can use any Roblox UI class (host components) as a built-in JSX tag name by converting the name to lowercase."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Frame"})," \u2192 ",(0,r.jsx)(n.code,{children:"frame"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"UIListLayout"})," \u2192 ",(0,r.jsx)(n.code,{children:"uilistlayout"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ViewportFrame"})," \u2192 ",(0,r.jsx)(n.code,{children:"viewportframe"})]}),"\n",(0,r.jsx)(n.li,{children:"etc."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Tag names can also be custom class components or functional components."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Custom components must use PascalCase."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\ninterface MyComponentProps {\n\tvalue: string;\n}\n\nfunction MyComponent(props: MyComponentProps) {\n\treturn <textlabel Text={props.value} />;\n}\n\nconst element = <MyComponent value="foobar" />;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Tag names can also be a property access expression to use components which are nested inside of objects or namespaces."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\ninterface MyComponentProps {\n\tvalue: string;\n}\n\nfunction MyComponent(props: MyComponentProps) {\n\treturn <textlabel Text={props.value} />;\n}\n\nconst Components = {\n\tMyComponent: MyComponent,\n};\n\nconst element = <Components.MyComponent value="foobar" />;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"special-attributes",children:"Special Attributes"}),"\n",(0,r.jsxs)(n.h3,{id:"key-attribute",children:[(0,r.jsx)(n.code,{children:"Key"})," Attribute"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Key"})," attribute controls what your UI Instance will be named in the DataModel. This is the same as the ",(0,r.jsx)(n.code,{children:'"Child"'})," key in this Luau example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'Roact.createElement("Frame", {\n\tChild = Roact.createElement("Frame", {}),\n})\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst element = (\n\t<frame>\n\t\t<frame Key="Child" />\n\t</frame>\n);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If an element is given the ",(0,r.jsx)(n.code,{children:"Key"})," attribute and it ",(0,r.jsx)(n.strong,{children:"not"})," a child of another element, it will be wrapped in a ",(0,r.jsx)(n.code,{children:"Roact.Fragment"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst element = <frame Key="Child" />;\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"ref-attribute",children:[(0,r.jsx)(n.code,{children:"Ref"})," Attribute"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Ref"})," attribute directly maps to the ",(0,r.jsx)(n.code,{children:"[Roact.Ref]"})," key in Luau."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst ref = Roact.createRef<Frame>();\nconst element = <frame Ref={ref} />;\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"change-attribute",children:[(0,r.jsx)(n.code,{children:"Change"})," Attribute"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Change"})," attribute takes an object which maps property name -> changed function. The changed function value will be given a reference ",(0,r.jsx)(n.code,{children:"rbx"})," to the rendered UI instance."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Note the double curly braces ",(0,r.jsx)(n.code,{children:"{{"})," and ",(0,r.jsx)(n.code,{children:"}}"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst element = (\n\t<frame\n\t\tChange={{\n\t\t\tPosition: (rbx) => print(`${rbx.GetFullName()} changed Position!`),\n\t\t}}\n\t/>\n);\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"event-attribute",children:[(0,r.jsx)(n.code,{children:"Event"})," Attribute"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Event"})," attribute takes an object which maps property name -> event connection function. The event connection function value will be given a reference ",(0,r.jsx)(n.code,{children:"rbx"})," to the rendered UI instance followed by the rest of the event arguments."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Note the double curly braces ",(0,r.jsx)(n.code,{children:"{{"})," and ",(0,r.jsx)(n.code,{children:"}}"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst element = (\n\t<textbutton\n\t\tEvent={{\n\t\t\tMouseButton1Down: (rbx, x, y) =>\n\t\t\t\tprint(`${rbx.GetFullName()} was clicked at (${x}, ${y})`),\n\t\t}}\n\t/>\n);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"spreading-into-attributes",children:"Spreading into Attributes"}),"\n",(0,r.jsxs)(n.p,{children:["You can spread objects into attributes using the form ",(0,r.jsx)(n.code,{children:"{...exp}"})," where ",(0,r.jsx)(n.code,{children:"exp"})," is an object. ",(0,r.jsx)("br",{}),"\nThis is useful for creating reusable preset lists of properties."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst MyStyle: Partial<WritableInstanceProperties<Frame>> = {\n\tBackgroundColor3: new Color3(0, 0, 0),\n\tBackgroundTransparency: 0.5,\n};\n\nconst element = <frame {...MyStyle} />;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"spreading-into-children",children:"Spreading into Children"}),"\n",(0,r.jsxs)(n.p,{children:["You can spread arrays into children using the form ",(0,r.jsx)(n.code,{children:"{...exp}"})," where ",(0,r.jsx)(n.code,{children:"exp"})," is a ",(0,r.jsx)(n.code,{children:"ReadonlyArray<T>"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst listItems = new Array<Roact.Element>();\nfor (let i = 0; i < 10; i++) {\n\tlistItems.push(<textbutton Text={`Button ${i}`} />);\n}\n\nconst element = <frame>{...listItems}</frame>;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"using-values-as-children",children:"Using Values as Children"}),"\n",(0,r.jsxs)(n.p,{children:["You can use values for children using the form ",(0,r.jsx)(n.code,{children:"{exp}"}),". This is useful for programmatically creating children. The allowed values are:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Roact.Element"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"ReadonlyArray<T>"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"ReadonlyMap<K, V>"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"undefined"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"boolean"})," and ",(0,r.jsx)(n.code,{children:"undefined"})," values do not actually get put into the children props, but allowing the values here is useful for creating conditional children values."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nlet condition = false;\n\nconst element = (\n\t<frame>\n\t\t{condition && <frame />}\n\t\t{condition ? <frame /> : undefined}\n\t</frame>\n);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"fragments",children:"Fragments"}),"\n",(0,r.jsxs)(n.p,{children:["To create a Fragment with JSX you can either use the tag name ",(0,r.jsx)(n.code,{children:"Roact.Fragment"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst fragment = <Roact.Fragment></Roact.Fragment>;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Or, you can use the shorthand form:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import Roact from "@rbxts/roact";\n\nconst fragment = <></>;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"extending-the-default-jsx-elements",children:"Extending the default JSX elements"}),"\n",(0,r.jsxs)(n.p,{children:["By default the JSX supports all gui objects, however this may be limiting in cases where you want to manage other instances using Roact.\nWhich elements are supported by JSX is determined by a global ",(0,r.jsx)(n.code,{children:"JSX"})," namespace, to allow for more instances to be created this way you need to extend this global namespace.\nIt is recommended to define this extension of the namespace in one central place for all instances."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Note the ",(0,r.jsx)(n.code,{children:"JSX.IntrinsicElement<T extends Instance>"})," expects the type for an instance to be passed into it to allow for the properties & events to be typed correctly."]}),"\n",(0,r.jsx)(n.strong,{children:"Also note that, by convention, all Roblox instances should be lowercased."})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"declare global {\n\tnamespace JSX {\n\t\tinterface IntrinsicElements {\n\t\t\t// Your instances into here\n\t\t\tproximityprompt: JSX.IntrinsicElement<ProximityPrompt>;\n\t\t\tfolder: JSX.IntrinsicElement<Folder>;\n\t\t}\n\t}\n}\n"})})]})}function M(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(V,{...e})}):V(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>l,M:()=>o});var r=t(1504);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);