"use strict";(self.webpackChunkroblox_ts_com=self.webpackChunkroblox_ts_com||[]).push([[847],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},78:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"Functions"},l=void 0,p={unversionedId:"api/functions",id:"api/functions",title:"Functions",description:"assert()",source:"@site/docs/api/functions.mdx",sourceDirName:"api",slug:"/api/functions",permalink:"/roblox-ts.com/docs/api/functions",draft:!1,editUrl:"https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/functions.mdx",tags:[],version:"current",frontMatter:{title:"Functions"},sidebar:"docs",previous:{title:"Constructors",permalink:"/roblox-ts.com/docs/api/constructors"},next:{title:"Utility Types",permalink:"/roblox-ts.com/docs/api/utility-types"}},c={},u=[{value:"<code>assert()</code>",id:"assert",level:3},{value:"<code>typeOf()</code>",id:"typeof",level:3},{value:"<code>typeIs()</code>",id:"typeis",level:3},{value:"<code>classIs()</code>",id:"classis",level:3},{value:"<code>opcall()</code>",id:"opcall",level:3},{value:"<code>identity()</code>",id:"identity",level:3}],d={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"assert"},(0,o.kt)("inlineCode",{parentName:"h3"},"assert()")),(0,o.kt)("p",null,"roblox-ts's assert uses \"JavaScript truthiness\" for it's condition. This means that ",(0,o.kt)("inlineCode",{parentName:"p"},'""')," (empty string), ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"NaN")," values will cause the assertion to fail in addition to ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("p",null,"The reason for this is so that we can take advantage of TypeScript's ",(0,o.kt)("inlineCode",{parentName:"p"},"asserts value")," predicate feature."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function foo(instance: Instance) {\n    assert(instance.IsA("Part"));\n    print(instance.Size); // instance _must_ be a Part to reach this line\n}\n')),(0,o.kt)("p",null,"Because of this change, ",(0,o.kt)("inlineCode",{parentName:"p"},"assert(0)")," or ",(0,o.kt)("inlineCode",{parentName:"p"},'assert("")')," will cause an error in roblox-ts, but not in Luau."),(0,o.kt)("h3",{id:"typeof"},(0,o.kt)("inlineCode",{parentName:"h3"},"typeOf()")),(0,o.kt)("p",null,'Unfortunately, TypeScript already has an operator named "typeof" in the form of ',(0,o.kt)("inlineCode",{parentName:"p"},"typeof x"),". Because of this, we cannot expose the Luau ",(0,o.kt)("inlineCode",{parentName:"p"},"typeof()")," function directly. To get around this, we compile ",(0,o.kt)("inlineCode",{parentName:"p"},"typeOf(value)")," into ",(0,o.kt)("inlineCode",{parentName:"p"},"typeof(value)"),"."),(0,o.kt)("h3",{id:"typeis"},(0,o.kt)("inlineCode",{parentName:"h3"},"typeIs()")),(0,o.kt)("p",null,"Checking types with ",(0,o.kt)("inlineCode",{parentName:"p"},"typeOf")," is usually not very useful with roblox-ts unless you need the string value that is returned. This is because TypeScript cannot infer that your if-statement confirmed the value was type checked:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function foo(value: unknown) {\n    if (typeOf(value) === "Vector3") {\n        print(value.X); // error: value is still unknown!\n    }\n}\n')),(0,o.kt)("p",null,"To get around this, ",(0,o.kt)("inlineCode",{parentName:"p"},'typeIs(value, "type")')," compiles to ",(0,o.kt)("inlineCode",{parentName:"p"},'typeof(value) == "type"')," and helps TypeScript infer the value was type checked:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function foo(value: unknown) {\n    if (typeIs(value, "Vector3")) {\n        print(value.X); // success!\n    }\n}\n')),(0,o.kt)("h3",{id:"classis"},(0,o.kt)("inlineCode",{parentName:"h3"},"classIs()")),(0,o.kt)("p",null,"Similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"typeIs"),", ",(0,o.kt)("inlineCode",{parentName:"p"},'classIs(value, "ClassName")')," compiles to ",(0,o.kt)("inlineCode",{parentName:"p"},'value.ClassName == "ClassName"'),". This is useful for cases where you might want to avoid ",(0,o.kt)("inlineCode",{parentName:"p"},"instance.IsA()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function foo(value: Instance) {\n    // value.IsA("Script") would return true for LocalScripts!\n    if (classIs(value, "Script")) {\n        print(value.Name);\n    }\n}\n')),(0,o.kt)("h3",{id:"opcall"},(0,o.kt)("inlineCode",{parentName:"h3"},"opcall()")),(0,o.kt)("p",null,"While ",(0,o.kt)("inlineCode",{parentName:"p"},"pcall")," is available, it returns the type ",(0,o.kt)("inlineCode",{parentName:"p"},"LuaTuple<[false, string] | [true, T]>")," which is difficult to use!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const [success, valueOrError] = pcall(() => 123);\n// valueOrError is string | number\n// if it worked -> number\n// if it errored -> string\n\nif (success) {\n    print(valueOrError); // string | number\n} else {\n    print(valueOrError); // string | number\n}\n")),(0,o.kt)("p",null,"The problem here is that ",(0,o.kt)("inlineCode",{parentName:"p"},"success")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"valueOrError")," are not linked after the destructure happens. You ",(0,o.kt)("em",{parentName:"p"},"can")," avoid destructuring the result, ",(0,o.kt)("a",{parentName:"p",href:"https://roblox-ts.com/playground/#code/MYewdgzgLgBATgUwgVwDawLwwA7AIaqoAURAlDBgHwwCMATAMykDcAUKwJYBmMRiK6ANoAGALrkA3qxgyYoSLABuBZAgrwkaKIJqi2snHA5goRZalUsYAemswwyALYAjBHFYBfGAlQQ1Ug3loGHNVdX4tHT1pWWwjEzMVBCtbGGh4gHNPIA"},"but that makes things very hard to read"),"."),(0,o.kt)("p",null,"To get around this, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"opcall")," which works the same as ",(0,o.kt)("inlineCode",{parentName:"p"},"pcall"),", but returns an object instead of the ",(0,o.kt)("inlineCode",{parentName:"p"},"LuaTuple<T>"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// result is { success: true; value: T; } | { success: false; error: string; }\nconst result = opcall(() => 123);\n\nif (result.success) {\n    print(result.value); // number\n} else {\n    print(result.error); // string\n}\n")),(0,o.kt)("h3",{id:"identity"},(0,o.kt)("inlineCode",{parentName:"h3"},"identity()")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"identity")," macro compiles to just the inner value you pass into it, allowing for a zero-cost type constraint abstraction. This is useful for verifying that a given value is the type you expect:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'interface MyInterface {\n    a: number;\n    b: string;\n    c: boolean;\n}\n\nconst objects = {\n    abc: identity<MyInterface>({\n        a: 123,\n        b: "abc",\n        c: true,\n    }),\n};\n')))}f.isMDXComponent=!0}}]);